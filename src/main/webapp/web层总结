关系型数据库依然是目前最有效的数据落地方案(内置良好的事务实现机制)。
秒杀业务的难点：竞争(如何高效的处理竞争)---反映到数据库上--->事务和行级锁
事务：
start Transaction
Update 库存数量(修改数量时加上行级锁，其他用户等待)
Insert 购买明细
Commit
 秒杀功能：
秒杀接口暴露,执行秒杀，相关查询

########################################################
1.技术回顾
    .前端交互设计过程
        前端，后端，产品设计共同秒杀流程。

    .Restful接口设计。

    .SpringMVC使用技巧。
        SpringMVC配置和运行流程。
        DTO传递数据。
        注解映射驱动

    .Bootstrap和JS的使用。
        Bootstrap,通过引入class设计页面。
        通过JSON对象来实现JavaScript模块化，类似分包。
        jQuery & plugin使用。
####################################################################3
2.高并发分析优化。
    1.CDN的理解：
        .CDN(内容分发网络)加速用户获取数据的系统，适用于请求的资源不易变化。
        .部署在离用户最近的网络节点上。
        .命中CDN不需要访问后端服务器。
        .互联网公司自己搭建或租用。

    2.高并发的点分析
        .详情页：大量刷新-->detail页，静态化，静态资源，css,js等存放与CDN缓存中-->秒杀系统。
        .获取系统时间不需要优化，访问一次内存(Cacheline)大约10ns.（1s=10亿纳秒）。

    3.秒杀地址接口分析：
        .无法使用CDN缓存，因为秒杀地址会变化。
        .适合服务端缓存。
        .一致性维护成本低。

    ####秒杀地址接口优化####
    请求地址--------##一致性维护：超时穿透/主动更新##------>redis----->Mysql

    ####秒杀操作优化（执行秒杀按钮的操作）####
    无法使用CDN缓存；后端缓存困难：库存问题（不可能在缓存中减库存）；一行数据竞争：热点商品。

    #######为什么不在Java客户端处理事务？#######
    update<--网络延迟，GC--->insert<--网络延迟，GC-->commit/rollback
    客户端执行sql，等待sql返回结果这个过程中在于数据库通信的过程中会出现GC，网络延迟等，同一行事务执行是串行化的。

3.优化方向：减少行级锁的持有时间；将客户端逻辑放到MySQL服务器端，避免网络延迟和GC影响。

    1.如何放到MySQL服务端。
        两种解决方案：
            -定制sql方案：update/*+[auto_commit]*/,需要修改MySQL源码。
            -使用存储过程，整个事务在MySQL端完成。

4.优化总结：
    。前端控制：暴露接口，按钮防重复。
    。动静态数据分离：CDN缓存，后端缓存。
    。事务竞争优化：减少事务锁时间(核心点)。

优化中有一个容易忽略的点：序列化,使用以下方式，而不是实现Sernizable接口
<!--protostuff序列化依赖-->
        <dependency>
            <groupId>com.dyuproject.protostuff</groupId>
            <artifactId>protostuff-core</artifactId>
            <version>1.0.8</version>
        </dependency>
        <dependency>
            <groupId>com.dyuproject.protostuff</groupId>
            <artifactId>protostuff-runtime</artifactId>
            <version>1.0.8</version>
        </dependency>

缓存优化：使用redis,
调换update与insert语句执行顺序，减少update时行级锁的持有时间。
深度优化：事务sql在mysql端执行，存储过程。